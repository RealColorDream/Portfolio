<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>My Portfolio</title>
    <link>https://realcolordream.github.io/Portfolio/</link>
    <description>Recent content on My Portfolio</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Mon, 30 Sep 2024 21:20:13 +0200</lastBuildDate><atom:link href="https://realcolordream.github.io/Portfolio/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>[NEW] Go_Gamedle in GoLang üêπ!</title>
      <link>https://realcolordream.github.io/Portfolio/works/gogamedle/</link>
      <pubDate>Mon, 30 Sep 2024 21:20:13 +0200</pubDate>
      
      <guid>https://realcolordream.github.io/Portfolio/works/gogamedle/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://github.com/RealColorDream/GoGamedle&#34;&gt;&lt;code&gt;üêô Github source here üêô&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&#34;go_gamedle-in-golang-&#34;&gt;Go_Gamedle in GoLang üêπ!&lt;/h1&gt;
&lt;h2 id=&#34;overview-of-the-game&#34;&gt;Overview of the game&lt;/h2&gt;
&lt;p&gt;Go_Gamedle is a simple game that aim to guess a game from a cover image or a description.
The game is written in GoLang and use the &lt;a href=&#34;https://gin-gonic.com/&#34;&gt;&lt;code&gt;gin-gonic&lt;/code&gt;&lt;/a&gt; to display an html page with the game.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;üöß currently Working In Progress üöß&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;what-does-this-project-use-&#34;&gt;What does this project use ?&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;GoLang&lt;/li&gt;
&lt;li&gt;Gin (Web framework in GoLang)&lt;/li&gt;
&lt;li&gt;HTML&lt;/li&gt;
&lt;li&gt;CSS (Bulma CSS for convenience)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And mostly the API of &lt;a href=&#34;https://www.igdb.com/&#34;&gt;IGDB&lt;/a&gt; which is a video game database.&lt;/p&gt;</description>
      <content>&lt;p&gt;&lt;a href=&#34;https://github.com/RealColorDream/GoGamedle&#34;&gt;&lt;code&gt;üêô Github source here üêô&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&#34;go_gamedle-in-golang-&#34;&gt;Go_Gamedle in GoLang üêπ!&lt;/h1&gt;
&lt;h2 id=&#34;overview-of-the-game&#34;&gt;Overview of the game&lt;/h2&gt;
&lt;p&gt;Go_Gamedle is a simple game that aim to guess a game from a cover image or a description.
The game is written in GoLang and use the &lt;a href=&#34;https://gin-gonic.com/&#34;&gt;&lt;code&gt;gin-gonic&lt;/code&gt;&lt;/a&gt; to display an html page with the game.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;üöß currently Working In Progress üöß&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;what-does-this-project-use-&#34;&gt;What does this project use ?&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;GoLang&lt;/li&gt;
&lt;li&gt;Gin (Web framework in GoLang)&lt;/li&gt;
&lt;li&gt;HTML&lt;/li&gt;
&lt;li&gt;CSS (Bulma CSS for convenience)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And mostly the API of &lt;a href=&#34;https://www.igdb.com/&#34;&gt;IGDB&lt;/a&gt; which is a video game database.&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>A Terminal minesweeper game implementation in Rust ü¶Ä</title>
      <link>https://realcolordream.github.io/Portfolio/works/minesweeper/</link>
      <pubDate>Sun, 22 Sep 2024 12:34:13 +0200</pubDate>
      
      <guid>https://realcolordream.github.io/Portfolio/works/minesweeper/</guid>
      <description></description>
      <content></content>
    </item>
    
    <item>
      <title>CIDR calculator script in python (subnet calculator) üêç</title>
      <link>https://realcolordream.github.io/Portfolio/works/cidr_script/</link>
      <pubDate>Sun, 22 Sep 2024 12:34:13 +0200</pubDate>
      
      <guid>https://realcolordream.github.io/Portfolio/works/cidr_script/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://github.com/RealColorDream/CIDR_script&#34;&gt;&lt;code&gt;üêô Github source here üêô&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&#34;cidr-calculator-is-a-simple-python-script-to-calculate-the-cidr-notation-of-an-ip-address&#34;&gt;CIDR calculator is a simple python script to calculate the CIDR notation of an IP address.&lt;/h1&gt;
&lt;h2 id=&#34;its-meant-to-be-as-easy-as-possible-to-use&#34;&gt;Its meant to be as easy as possible to use&lt;/h2&gt;
&lt;h2 id=&#34;usage&#34;&gt;Usage:&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; CIDR &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; _
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;CIDR &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; _&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;CIDR(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;192.168.0.0&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;24&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;# IP, subnet_numbers&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;print(CIDR) &lt;span style=&#34;color:#75715e&#34;&gt;# by default, it will print all the information of this ip&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;print(CIDR&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;first_IP_device())
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;methods&#34;&gt;Methods:&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; method &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; dir(_&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;CIDR):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; method&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;startswith(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;__&amp;#34;&lt;/span&gt;):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        print(method)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# [&amp;#39;broadcast_IP&amp;#39;, &amp;#39;first_IP&amp;#39;, &amp;#39;first_IP_device&amp;#39;, &amp;#39;get_mask_Number&amp;#39;, &amp;#39;get_network_IP&amp;#39;, &amp;#39;last_IP&amp;#39;, &amp;#39;last_IP_device&amp;#39;, &amp;#39;number_of_IP&amp;#39;, &amp;#39;number_of_IP_device&amp;#39;, &amp;#39;parse_IP_to_int&amp;#39;, &amp;#39;parse_int_to_IP&amp;#39;, &amp;#39;parse_ip_to_list&amp;#39;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
      <content>&lt;p&gt;&lt;a href=&#34;https://github.com/RealColorDream/CIDR_script&#34;&gt;&lt;code&gt;üêô Github source here üêô&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&#34;cidr-calculator-is-a-simple-python-script-to-calculate-the-cidr-notation-of-an-ip-address&#34;&gt;CIDR calculator is a simple python script to calculate the CIDR notation of an IP address.&lt;/h1&gt;
&lt;h2 id=&#34;its-meant-to-be-as-easy-as-possible-to-use&#34;&gt;Its meant to be as easy as possible to use&lt;/h2&gt;
&lt;h2 id=&#34;usage&#34;&gt;Usage:&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;import&lt;/span&gt; CIDR &lt;span style=&#34;color:#66d9ef&#34;&gt;as&lt;/span&gt; _
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;CIDR &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; _&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;CIDR(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;192.168.0.0&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;24&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;# IP, subnet_numbers&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;print(CIDR) &lt;span style=&#34;color:#75715e&#34;&gt;# by default, it will print all the information of this ip&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;print(CIDR&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;first_IP_device())
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;methods&#34;&gt;Methods:&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;for&lt;/span&gt; method &lt;span style=&#34;color:#f92672&#34;&gt;in&lt;/span&gt; dir(_&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;CIDR):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;not&lt;/span&gt; method&lt;span style=&#34;color:#f92672&#34;&gt;.&lt;/span&gt;startswith(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;__&amp;#34;&lt;/span&gt;):
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        print(method)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;# [&amp;#39;broadcast_IP&amp;#39;, &amp;#39;first_IP&amp;#39;, &amp;#39;first_IP_device&amp;#39;, &amp;#39;get_mask_Number&amp;#39;, &amp;#39;get_network_IP&amp;#39;, &amp;#39;last_IP&amp;#39;, &amp;#39;last_IP_device&amp;#39;, &amp;#39;number_of_IP&amp;#39;, &amp;#39;number_of_IP_device&amp;#39;, &amp;#39;parse_IP_to_int&amp;#39;, &amp;#39;parse_int_to_IP&amp;#39;, &amp;#39;parse_ip_to_list&amp;#39;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content>
    </item>
    
    <item>
      <title>Conway&#39;s Game of life implementation in Rust ü¶Ä</title>
      <link>https://realcolordream.github.io/Portfolio/works/gameoflife/</link>
      <pubDate>Sun, 22 Sep 2024 12:34:13 +0200</pubDate>
      
      <guid>https://realcolordream.github.io/Portfolio/works/gameoflife/</guid>
      <description>&lt;h2 id=&#34;a-simple-implementation-of-the-conways-game-of-life-written-in-rust&#34;&gt;A simple implementation of the conway&amp;rsquo;s game of life written in rust.&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/RealColorDream/game-of-life&#34;&gt;&lt;code&gt;üêô Github source here üêô&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;overview-of-the-game&#34;&gt;Overview of the game&lt;/h2&gt;
&lt;p&gt;Conway&amp;rsquo;s Game of Life is a cellular automaton devised by the British mathematician John Horton Conway in 1970. It is a zero-player game, meaning that its evolution is determined by its initial state, requiring no further input. The game consists of a grid of cells that can be either alive or dead, and it evolves through a series of generations based on a set of simple rules.&lt;/p&gt;</description>
      <content>&lt;h2 id=&#34;a-simple-implementation-of-the-conways-game-of-life-written-in-rust&#34;&gt;A simple implementation of the conway&amp;rsquo;s game of life written in rust.&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/RealColorDream/game-of-life&#34;&gt;&lt;code&gt;üêô Github source here üêô&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;overview-of-the-game&#34;&gt;Overview of the game&lt;/h2&gt;
&lt;p&gt;Conway&amp;rsquo;s Game of Life is a cellular automaton devised by the British mathematician John Horton Conway in 1970. It is a zero-player game, meaning that its evolution is determined by its initial state, requiring no further input. The game consists of a grid of cells that can be either alive or dead, and it evolves through a series of generations based on a set of simple rules.&lt;/p&gt;
&lt;h2 id=&#34;rules&#34;&gt;Rules&lt;/h2&gt;
&lt;p&gt;The state of each cell in the grid is updated simultaneously based on the following rules:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;Survival&lt;/strong&gt;: A live cell with two or three live neighbors remains alive in the next generation.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Death&lt;/strong&gt;: A live cell with fewer than two live neighbors dies (underpopulation), and a live cell with more than three live neighbors dies (overpopulation).&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Birth&lt;/strong&gt;: A dead cell with exactly three live neighbors becomes alive (reproduction).&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;These rules create a dynamic system where simple initial configurations can lead to complex behaviors over time.&lt;/p&gt;
&lt;h3 id=&#34;to-build-and-run-this-project-you-need-to-have-the-following-installed&#34;&gt;To Build and Run this project you need to have the following installed:&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Rust&lt;/li&gt;
&lt;li&gt;Cargo&lt;/li&gt;
&lt;li&gt;SDL2 (refer to the &lt;a href=&#34;https://docs.rs/embedded-graphics-simulator/0.6.0/embedded_graphics_simulator/#setup&#34;&gt;guide of the embedded-graphics crate&lt;/a&gt; for installation)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;the-game-is-implemented-using-embedded-graphics-and-runs-on-a-64x64-monochrome-display&#34;&gt;The game is implemented using embedded-graphics and runs on a 64x64 monochrome display.&lt;/h3&gt;
&lt;p&gt;&lt;img alt=&#34;Description of Image&#34; src=&#34;https://realcolordream.github.io/Portfolio/Portfolio/img/game-of-life.png&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;keybinds&#34;&gt;Keybinds:&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Space&lt;/code&gt; to pause/unpause the game&lt;/li&gt;
&lt;li&gt;&lt;code&gt;TAB&lt;/code&gt; to reset the game&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Arrow keys&lt;/code&gt; to move the cursor&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Enter&lt;/code&gt; to toggle the state of the cell under the cursor when the game is paused&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Escape&lt;/code&gt; to exit the game&lt;/li&gt;
&lt;li&gt;&lt;code&gt;LMB&lt;/code&gt; to spawn a spaceship at the position of the cursor&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Have fun!&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>Simultaneous Opposite Cardinal Directions (SOCD) in rust ü¶Ä !</title>
      <link>https://realcolordream.github.io/Portfolio/works/socd/</link>
      <pubDate>Sun, 22 Sep 2024 12:34:13 +0200</pubDate>
      
      <guid>https://realcolordream.github.io/Portfolio/works/socd/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://github.com/RealColorDream/socd&#34;&gt;&lt;code&gt;üêô Github source here üêô&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;you-may-have-heard-of-new-keyboards-with-short-response-time-some-of-them-have-features-that-enable-them-to-only-response-with-the-last-input-sent-by-the-user&#34;&gt;You may have heard of new keyboards with short response time. Some of them have features that enable them to only response with the last input sent by the user.&lt;/h3&gt;
&lt;h3 id=&#34;here-is-a-quick-video-that-explain-how-socd-works-&#34;&gt;Here is a quick video that explain how SOCD works :&lt;/h3&gt;


    
    &lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
      &lt;iframe allow=&#34;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share&#34; allowfullscreen=&#34;allowfullscreen&#34; loading=&#34;lazy&#34; referrerpolicy=&#34;strict-origin-when-cross-origin&#34; src=&#34;https://www.youtube.com/embed/NPWfg0BjY2g?autoplay=0&amp;controls=1&amp;end=0&amp;loop=0&amp;mute=0&amp;start=0&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; title=&#34;YouTube video&#34;
      &gt;&lt;/iframe&gt;
    &lt;/div&gt;

&lt;h3 id=&#34;so-this-quick-script-is-meant-to-replicate-the-last-input-first-feature-in-certain-keyboards&#34;&gt;So this quick script is meant to replicate the &amp;rsquo;last input first&amp;rsquo; feature in certain keyboards.&lt;/h3&gt;
&lt;h3 id=&#34;the-script-is-written-in-rust-and-uses-the-device_query-cratehttpscratesiocratesdevice_query-crate-to-handle-the-users-input&#34;&gt;The script is written in Rust and uses the &lt;a href=&#34;https://crates.io/crates/device_query&#34;&gt;&lt;code&gt;device_query crate&lt;/code&gt;&lt;/a&gt; crate to handle the users input.&lt;/h3&gt;
&lt;h3 id=&#34;this-script-is-simple-it-reads-the-input-from-the-user-and-if-the-user-press-two-opposite-directions-at-the-same-time-it-will-only-keep-the-last-input-sent&#34;&gt;This script is simple, it reads the input from the user and if the user press two opposite directions at the same time, it will only keep the last input sent.&lt;/h3&gt;
&lt;h3 id=&#34;i-am-currently-considering-to-build-a-gui-graphic-user-interface-to-keep-the-management-of-the-user-keymaps-easy-&#34;&gt;I am currently considering to build a gui (graphic user interface) to keep the management of the user keymaps easy ‚ú®&lt;/h3&gt;</description>
      <content>&lt;p&gt;&lt;a href=&#34;https://github.com/RealColorDream/socd&#34;&gt;&lt;code&gt;üêô Github source here üêô&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;you-may-have-heard-of-new-keyboards-with-short-response-time-some-of-them-have-features-that-enable-them-to-only-response-with-the-last-input-sent-by-the-user&#34;&gt;You may have heard of new keyboards with short response time. Some of them have features that enable them to only response with the last input sent by the user.&lt;/h3&gt;
&lt;h3 id=&#34;here-is-a-quick-video-that-explain-how-socd-works-&#34;&gt;Here is a quick video that explain how SOCD works :&lt;/h3&gt;


    
    &lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
      &lt;iframe allow=&#34;accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share&#34; allowfullscreen=&#34;allowfullscreen&#34; loading=&#34;lazy&#34; referrerpolicy=&#34;strict-origin-when-cross-origin&#34; src=&#34;https://www.youtube.com/embed/NPWfg0BjY2g?autoplay=0&amp;controls=1&amp;end=0&amp;loop=0&amp;mute=0&amp;start=0&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; title=&#34;YouTube video&#34;
      &gt;&lt;/iframe&gt;
    &lt;/div&gt;

&lt;h3 id=&#34;so-this-quick-script-is-meant-to-replicate-the-last-input-first-feature-in-certain-keyboards&#34;&gt;So this quick script is meant to replicate the &amp;rsquo;last input first&amp;rsquo; feature in certain keyboards.&lt;/h3&gt;
&lt;h3 id=&#34;the-script-is-written-in-rust-and-uses-the-device_query-cratehttpscratesiocratesdevice_query-crate-to-handle-the-users-input&#34;&gt;The script is written in Rust and uses the &lt;a href=&#34;https://crates.io/crates/device_query&#34;&gt;&lt;code&gt;device_query crate&lt;/code&gt;&lt;/a&gt; crate to handle the users input.&lt;/h3&gt;
&lt;h3 id=&#34;this-script-is-simple-it-reads-the-input-from-the-user-and-if-the-user-press-two-opposite-directions-at-the-same-time-it-will-only-keep-the-last-input-sent&#34;&gt;This script is simple, it reads the input from the user and if the user press two opposite directions at the same time, it will only keep the last input sent.&lt;/h3&gt;
&lt;h3 id=&#34;i-am-currently-considering-to-build-a-gui-graphic-user-interface-to-keep-the-management-of-the-user-keymaps-easy-&#34;&gt;I am currently considering to build a gui (graphic user interface) to keep the management of the user keymaps easy ‚ú®&lt;/h3&gt;
</content>
    </item>
    
  </channel>
</rss>
